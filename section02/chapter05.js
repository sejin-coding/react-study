// 자바스크립트의 자료형(타입)
// 자료형(Data Type) -----> 원시 타입 -----> Number
//                  |                ㄴ---> String
//                  |                ㄴ---> Boolean
//                  |                ㄴ---> Null
//                  |                ㄴ---> Undefined
//                  |
//                   -----> 객체 타입 -----> Object -----> Array ( 추가된 기능 : 순차 저장, 순회 등 )
//                                                  ㄴ---> Function ( 추가된 기능 : 호출, 선언 등 )
//                                                  ㄴ---> RegexExp

// 원시타입과 객체타입은 값이 저장되거나 복사되는 과정이 서로 다름!!!
// 원시타입 : (불변값. 메모리에 저장된 원본데이터가 변하지 않아서) Number, String, Boolean 등 값 자체로써 변수에 저장되고 복사 된다.
// 객체타입 : (가변값. 참조값을 저장. 원본데이터를 수정해버림) Object, Array, Function 등 참조값을 통해 변수에 저장되고 복사된다.

// 객체타입 주의사항 1. 의도치 않게 값이 수정될 수 있다.
let o1 = { name: "박세진" };
let o2 = o1; // 얕은 복사 : 객체의 참조값을 복사함. 원본 객체가 수정될 수 있어 위험함.

let o3 = { name: "박세진" };
let o4 = { ...o3 }; // 깊은 복사 : 새로운 객체를 생성하면서 프로퍼티만 따로 복사 함. 원본 객체가 수정될 일이 없어 안전함.

console.log(o2, o4);

// 객체타입 주의사항 2. 객체간의 비교는 기본적으로 참조값을 기준으로 이루어진다.
// 같은 값을 가지더라도 참조값이 다른 o1 = o2 vs o3 여서 다르다고 나옴.
o1 === o2; // 얕은 비교 : 참조값을 기준으로 비교
JSON.stringify(o1) === JSON.stringify(o2); // 깊은 비교 : 객체를 문자열로 변환하여 비교. JSON.stringify 등의 내장 함수를 이용해야 햠.

// 객체타입 주의사항 3. 배열과 함수도 사실 객체이다.
