// Meta(Facebook)이 개발한 오픈소스 JavaScript 라이브러리
// 대규모 웹 서비스의 UI를 더 편하게 개발하기 위해 만들어진 기술

// React의 기술적인 특징
// 1. 컴포넌트를 기반으로 UI를 표현한다
// 컴포넌트 : "구성요소"라는 뜻
// 모든 요소를 컴포넌트화해서 중복되는 코드가 발생하지 않음.

// 2. 화면 업데이트 구현이 쉽다.
// 업데이트 : 사용자의 행동에 따라 웹 페이지가 스스로 모습을 바꿔 상호작용하는 것.
// react ----> 선언형 프로그램 방식으로 하기 때문. 과정은 생략하고 목적만 간결히 명시하는 방법. (ex. 토마토 파스타 주세요 )
// javascript ----> 반대로 명령형 프로그래밍 : 목적을 이루기 위한 모든 일련의 과정을 설명하는 방식. (ex. 주방가서 면 꺼내고 어쩌고 삶고 해서 접시에 가져다 주세요 )
// 렌더링 : UI 요소를 화면에 그려내는 것.
// State 변수의 값에 따라서 랜더링이 되도록 설정해줄 수 있기 때문에 State 변수의 값만 바꾸면 다른 버전의 UI를 간결하게 업데이트 가능.
// 정리하자면, 리엑트는 업데이트를 위한 복잡한 동작을 직접 정의할 필요 없이 특정 변수의 값을 바꾸는 것 만으로도 화면을 업데이트 시킬 수 있다.

// 3. 화면 업데이트가 빠르게 처리된다.
// Critical Rendering Path 브라우저의 렌더링 과정
// HTML -> DOM(Document Object Model) 브라우저가 자기가 더 이해하기 쉽게 객체 모델로 변환한 것. 즉 문서 객체 모델 <--- 요소들의 위치, 배치, 모양에 관한 모든 정보
//           |
//          Render Tree( 웹페이지의 청사진. 즉 설계도 ) ---> Layout (요소 배치를 잡는 작업) ---> Painting (요소를 실제로 화면에 그려내는 과정)
//           |
//  CSS  -> CSSOM (CSS 코드를 브라우저가 이해하기 편하게 바꾼 것.) <--- 요소들의 스타일과 관련된 모든 정보

// JavaScript가 DOM을 수정하게 되면 업데이트가 일어남. 다시 RenderTree 생성하고 화면에 Painting 되면서 업뎃 일어남.
// Layout과 Paining이 오래걸림. Reflow(Layout 다시한다), Repaint(Paint를 다시한다.) --> 이렇게 되면 3000번 수정하면 다시 다 되니까 마비가 될 수 있음. 성능 BAD

// DOM은 딱 한번만 수정되게 하는게 좋음. 최소화 해야함!!
// 다양한 업데이트 -> 동시에 발생한 업데이트를 모음 -> 다 모였다면 한번에 수정 -> DOM 최소한으로 변경!
// 하지만 위와 같으면 서비스의 규모가 커질 수록 점점 힘들어짐.
// React는 이 과정을 자동으로 해줌!!!!!! feat. Virtual DOM

// Virtual DOM이란
// 1. DOM을 자바스크립트 객체로 흉내낸 것으로 일종의 복제판이라고 생각하면 된다.
// 2. React는 업데이트가 발생하면 실제 DOM을 수정하기 전에 이 가상의 복제판 DOM에 먼저 반영해본다. (연습 스윙 같은 느낌)
// 즉 여러개의 업데이트가 다 모인 Virtual DOM을 한번에 반영해서 DOM을 1회 수정으로 Actual DOM을 만드는 것임. 
